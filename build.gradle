plugins {
    id 'java'
    id 'groovy'
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.google.cloud.tools.appengine' version '2.4.4'
    id "org.sonarqube" version "3.5.0.2730"
    id 'jacoco'
    id 'codenarc'
}

group 'org.aa.branch.mapping'
version '0.1-SNAPSHOT'

ext {
    springCloudVersion = "Hoxton.SR12"
    set('log4j2.version', '2.17.1')
}

/**
 * System properties which are used by 'apiTest' task on their initialization by Gradle.
 */
ext.staticSystemProperties = [
        'api.tests.env.url': System.getProperty('api.tests.env.url'),
]

java {
    sourceCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenCentral()
}

appengine {
    deploy {
        stopPreviousVersion = true
        promote = true
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    includes = ['org/aa/branch/mapping/unit/*Spec*']
}

task apiTest(type: Test) {
    mustRunAfter tasks.getByName('testClasses')

    useJUnitPlatform()
    systemProperties(project.ext.get('staticSystemProperties'))
    includes = ['org/aa/branch/mapping/api/*Spec*']
}

sonarqube {
    properties {
        property "sonar.projectKey", "AlexeyAkentyev_branch-mapping-tool"
        property "sonar.organization", "alexeyakentyev"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.exclusions", "**/BranchConnection.*, **/BranchConnectionBuilder.*"
        property "sonar.qualitygate.wait", true
    }
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/BranchConnection.*', '**/BranchConnectionBuilder.*'])
        }))
    }
}

codenarc.configFile = rootProject.file('gradle/codenarc/rulesets.groovy')

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.google.cloud:google-cloud-datastore:2.12.5'

    testImplementation 'org.codehaus.groovy:groovy-all:3.0.13'
    testImplementation 'org.codehaus.groovy:groovy:3.0.13'
    testImplementation 'org.spockframework:spock-core:2.3-groovy-3.0'
    testImplementation 'org.spockframework:spock-spring:2.3-groovy-3.0'
    testImplementation 'org.assertj:assertj-core:3.23.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.rest-assured:rest-assured:4.5.1'
    testImplementation 'com.devskiller:jfairy:0.6.5'
    testImplementation 'org.apache.commons:commons-text:1.10.0'

    codenarc 'org.codenarc:CodeNarc:3.1.0'
}

tasks.named('wrapper', Wrapper) {
    it.distributionType = Wrapper.DistributionType.ALL
    it.gradleVersion = '7.5.1'
}